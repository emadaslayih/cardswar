{"version":3,"sources":["Pic/Warlogo.png","Components/StartPage.js","Components/GamePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","StartPage","props","changeFullName","n","setState","fullName","target","value","useAddPlayer","state","alert","temp1","cards","i","k","push","lengthOfCards","length","index","Math","floor","random","cardsOfPlayer","splice","cardsOfComputer","startGame","show","className","id","src","Warlogo","placeholder","name","onChange","onClick","to","this","Component","GamePage","again","players","cardWin","cardLose","numberOfLose","numberOfWins","startGameAgain","index3","map","element","index2","tempnum1","tempnum2","remove","temp","numberOfGames","temp2","App","c","p","numberOfTiko","indexPlayer","comp","player","numOfLose","numOfWin","removeCard","index1","filter","val","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b1e97c1c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Warlogo.84feeb88.png\";","import React, { Component } from 'react'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport Warlogo from '../Pic/Warlogo.png';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class StartPage extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            fullName:'',\r\n            cardsOfPlayer:[],\r\n            cardsOfComputer:[],\r\n            cards:[1,2,3,4,5,6,7,8,9,10,11,12,13]\r\n        }\r\n    }\r\n    // change state input fullname \r\n    changeFullName = (n) =>{    \r\n        this.setState({fullName:n.target.value})\r\n    }\r\n\r\n    // add new player to state with 2 arrays * 26 cards\r\n    useAddPlayer = () => {\r\n        debugger;\r\n        if (this.state.fullName == ''){ // check fullname input \r\n            alert ('please insert name');   \r\n        }\r\n        else{\r\n            let temp1 =this.state.cards;\r\n            for(let i=0;i<13;i++){ // start to push 39 numbers to cards array (13+39=52 cards)\r\n                for(let k=0;k<3;k++){\r\n                    this.state.cards.push(temp1[i]);\r\n                    }}\r\n                    let lengthOfCards = this.state.cards.length;\r\n                    for(let i=0;i<26;i++){ //push 26 cards to cardsplayer array\r\n                        let index = Math.floor(Math.random()*(lengthOfCards-0)) \r\n                        this.state.cardsOfPlayer.push(temp1[index])\r\n                        this.state.cards.splice(index,1);\r\n                        lengthOfCards = lengthOfCards -1;\r\n                    }\r\n                    for(let i=0;i<26;i++){// push 26 cards to cardsComputer array\r\n                        let index = Math.floor(Math.random()*(lengthOfCards-0))\r\n                        this.state.cardsOfComputer.push(temp1[index])\r\n                        this.state.cards.splice(index,1);\r\n                        lengthOfCards = lengthOfCards -1;\r\n                    }\r\n                }\r\n                this.props.startGame(this.state.cardsOfComputer,this.state.fullName,this.state.cardsOfPlayer);\r\n            } \r\n\r\n    show = () =>{\r\n        const fullNameValue = this.state.fullName;\r\n        if (fullNameValue == ''){\r\n            return (\r\n                <div className=\"container\" >\r\n                    <div className=\"col-12\">\r\n                    <p className=\"display-4\" >Ready For</p>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                    <img id=\"warLogo\" src={Warlogo}></img>\r\n                    </div>\r\n                    <div className=\"col-12\" id=\"enterName\">\r\n                    <input placeholder=\"Enter your name\" name=\"fullName\" onChange={this.changeFullName}></input>\r\n                    </div>\r\n                    <div className=\"col-12\" id=\"startBtn\">\r\n                     <button className=\"btn-primary\"  onClick={this.useAddPlayer}>Start</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n            else {\r\n        return (\r\n            <div className=\"container\" >\r\n                <div className=\"col-12\">\r\n                <p className=\"display-4\" >Ready For</p>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                <img id=\"warLogo\" src={Warlogo}></img>\r\n                </div>\r\n                <div className=\"col-12\" id=\"enterName\">\r\n                <input placeholder=\"Enter your name\" name=\"fullName\" onChange={this.changeFullName}></input>\r\n                </div>\r\n                <div className=\"col-12\" id=\"startBtn\">\r\n                <Link  to='/gamePage'>  <button className=\"btn-primary\"  onClick={this.useAddPlayer}>Start</button></Link>\r\n                </div>\r\n            </div>  \r\n        )\r\n            }\r\n    }\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                {this.show()}\r\n            </div>\r\n\r\n        )\r\n}\r\n}","import React, { Component } from 'react'\r\nimport '../Style/Style.css'\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\n\r\nexport default class GamePage extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            numberOfLose:this.props.numberOfLose,\r\n            numberOfWins:this.props.numberOfWins,\r\n            cardsOfPlayer:[],\r\n            cardsOfComputer:[],\r\n            index:0,\r\n            cards:[1,2,3,4,5,6,7,8,9,10,11,12,13],\r\n        }\r\n    }\r\n   \r\n// on click again\r\nagain = ()=>{\r\n    debugger;\r\n    let index = this.state.index; // if computer Win Or Tiko add 1 number of lose \r\n    if (this.props.players[index].cardWin < this.props.players[index].cardLose || this.props.players[index].cardWin == this.props.players[index].cardLose){\r\n             this.state.numberOfLose +=1 \r\n    }\r\n    else { // if player win add 1 number of wins\r\n        this.state.numberOfWins +=1\r\n    }\r\n    let temp1 = this.state.cards;\r\n    for(let i=0;i<13;i++){ // start again with new cards array \r\n        for(let k=0;k<3;k++){\r\n            this.state.cards.push(temp1[i]);\r\n            }}\r\n            let lengthOfCards = this.state.cards.length;\r\n            for(let i=0;i<26;i++){//push 26 cards to cardsplayer array\r\n                let index = Math.floor(Math.random()*(lengthOfCards-0))\r\n                this.state.cardsOfPlayer.push(temp1[index])\r\n                this.state.cards.splice(index,1);\r\n                lengthOfCards = lengthOfCards -1;\r\n            }\r\n            for(let i=0;i<26;i++){//push 26 cards to cardsComputer array\r\n                let index = Math.floor(Math.random()*(lengthOfCards-0))\r\n                this.state.cardsOfComputer.push(temp1[index])\r\n                this.state.cards.splice(index,1);\r\n                lengthOfCards = lengthOfCards -1;\r\n            }\r\n            this.props.startGameAgain(this.state.index,this.state.cardsOfComputer,this.state.cardsOfPlayer,this.state.numberOfLose,this.state.numberOfWins);\r\n        }\r\n       \r\nshow = ()=>{\r\n    debugger;\r\n    let index3 = this.state.index;\r\n    let temp3=this.props.players;\r\n              if (temp3[0].cardsOfComputer.length  > 0) { // if cardsPlayer array lenght > 0\r\n                  return (\r\n            this.props.players.map((element,index2)=>{\r\n                this.state.index = index2;\r\n            let temp1= element.cardsOfPlayer.length-1\r\n            let tempnum1= Math.floor(Math.random()*(temp1-0))\r\n            let tempnum2= Math.floor(Math.random()*(temp1-0))\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        <p className=\"display-4\" id=\"computer\">Computer</p>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                    <p id=\"cardOfComputer\">{element.cardsOfComputer[tempnum1]}</p>\r\n                    </div>\r\n               </div>\r\n                <div className=\"row\">\r\n                 <div className=\"col-6\">\r\n                    <p className=\"display-4\" id=\"you\">You</p>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                    <p id=\"cardOfPlayer\">{element.cardsOfPlayer[tempnum2]}</p>\r\n                    </div> \r\n                </div>\r\n                <div className = \"col-12\">\r\n                <button id=\"nextbtn\" className=\"btn-primary\" onClick={()=>this.props.remove(index2,tempnum1,tempnum2)} >NEXT</button>\r\n                </div>\r\n            </div>\r\n        )}))} // if player lose the game or tiko\r\n        else if (this.props.players[index3].cardWin < this.props.players[index3].cardLose ||this.props.players[index3].cardWin == this.props.players[index3].cardLose ){\r\n       let temp = this.props.players[index3].numberOfLose +1;\r\n        return(\r\n           <div>\r\n               <p className=\"display-4\" id=\"uouWin\">You Lose</p><br/>\r\n               <p>numberOfWins = {this.state.numberOfWins}</p><br/>\r\n               <p>numberOfLose = {temp}</p><br/>\r\n               <p>numberOfGames = {this.props.players[index3].numberOfGames}</p>\r\n                <button className=\"btn-primary\" onClick={this.again}>Again</button>\r\n           </div>\r\n        )\r\n    } \r\n    else { // player wins\r\n         let temp2 =  this.props.players[index3].numberOfWins +1;\r\n        return(\r\n            <div>\r\n                <p className=\"display-4\" id=\"uouWin\">You Win</p><br/>\r\n                <p>numberOfWins = {temp2}</p><br/>\r\n               <p>numberOfLose = {this.state.numberOfLose}</p><br/>\r\n                <p>numberOfGames = {this.props.players[index3].numberOfGames}</p>\r\n                 <button className=\"btn-primary\" onClick={this.again}>Again</button>\r\n            </div>\r\n         )\r\n    }\r\n\r\n        }\r\n\r\n\r\n        render() {\r\n            return (\r\n                <div> \r\n                    {this.show()}\r\n             </div>\r\n            )}\r\n\r\n            }\r\n \r\n","import React, { Component } from 'react'\nimport { HashRouter as Router , Switch , Route} from 'react-router-dom';\nimport './Style/Style.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport StartPage from './Components/StartPage';\nimport GamePage from './Components/GamePage';\nimport './App.css';\n\n\nexport default class App extends Component {\n\n    \n  state = {\n        players:[],\n      }\n//start game function\n      startGame = (c,n,p)=>{\n        \n        this.setState({players:[...this.state.players,{fullName:n , numberOfWins:0 ,cardWin:0,cardLose:0,numberOfLose:0 ,numberOfTiko:0,numberOfGames:1,cardsOfPlayer:p,cardsOfComputer:c}]});\n  }\n// start game again function\n  startGameAgain = (indexPlayer,comp,player,numOfLose,numOfWin)=>{\n    debugger;\n    let temp = this.state.players;\n    this.state.players[indexPlayer].numberOfWins =  numOfWin;\n    this.state.players[indexPlayer].numberOfLose =  numOfLose;\n    this.state.players[indexPlayer].cardWin = 0;\n    this.state.players[indexPlayer].cardLose = 0;\n    this.state.players[indexPlayer].numberOfGames = temp[indexPlayer].numberOfGames + 1;\n    this.state.players[indexPlayer].cardsOfComputer = comp;\n    this.state.players[indexPlayer].cardsOfPlayer = player;\n    this.setState({players:[...this.state.players]})\n}\n// remove card function\n  removeCard = (indexPlayer,index1,index2) =>{\n    debugger; // if card of copmuter > card of player or = , add 1 to card lose of player\n    if (this.state.players[indexPlayer].cardsOfComputer[index1]>this.state.players[indexPlayer].cardsOfPlayer[index2] || this.state.players[indexPlayer].cardsOfComputer[index1]==this.state.players[indexPlayer].cardsOfPlayer[index2] ){\n      this.state.players[indexPlayer].cardLose += 1;\n    }\n    else {// if card of player > card of computer ,add 1 to card win of player\n      this.state.players[indexPlayer].cardWin += 1;\n    }\n    // remove card from compuetr cards and player cards\n    this.state.players[indexPlayer].cardsOfComputer =  this.state.players[indexPlayer].cardsOfComputer.filter((val,i) => (i!=index1))\n    this.state.players[indexPlayer].cardsOfPlayer = this.state.players[indexPlayer].cardsOfPlayer.filter((val,i) => (i!=index2))\n    this.setState({players:[...this.state.players]})\n  }\n\n\n    render() {\n      return (\n          <div className=\"App container\">\n            <Router>\n              <Switch>\n                <Route  exact path='/' component={()=>{return <StartPage  startGame={this.startGame}/>}} /> \n                <Route exact path='/gamePage' component={ () => {return <GamePage startGameAgain={this.startGameAgain} players={this.state.players} numberOfWins={this.state.players[0].numberOfWins} numberOfLose={this.state.players[0].numberOfLose} remove={this.removeCard} /> }}/> \n              </Switch>\n            </Router>\n          </div>\n      )}\n  \n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}